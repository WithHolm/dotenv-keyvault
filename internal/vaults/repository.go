package vaults

import (
	"dotenv-keyvault/internal/tools"
	"fmt"
	"log/slog"
	"os"
	"strings"
)

type Vault interface {
	Push(name string, value string) error // push a single secret
	Pull() (map[string]string, error)     // pull all secrets
	Flush(key string) error               // flush a single secret
	FlushAll() error                      // flush all secrets
	Opsie() error                         // tries to un-delte
	Warmup() error                        // Warm the vault connection. used for pull,push,grab(soon)
	SetOptions(map[string]string) error   // set options for the vault
	GetOptions() map[string]string        // get options for the vault
	WizardWarmup()                        // get questions for init
	WizardNext() VaultWizardCard          //get next question
	WizardComplete() map[string]string    //everything is done, do your cleanup and return the options for the vault
}

type VaultWizardCard struct {
	Title     string
	Questions []VaultWizardSelection
	Callback  func(string) error
}

type VaultWizardSelection struct {
	Key         string
	Description string
}

func NewInitVault(vaultType string) (Vault, error) {
	if vaultType == "keyvault" {
		cli := KeyvaultClient{}
		return &cli, nil
	}
	return nil, fmt.Errorf("unknown vault type: %s", vaultType)
}

func NewVault(vaultType string, options map[string]string) (Vault, error) {
	if vaultType == "" {
		return nil, fmt.Errorf("vault type cannot be empty")
	}

	v, err := NewInitVault(vaultType)
	if err != nil {
		return nil, err
	}
	v.SetOptions(options)
	err = v.Warmup()
	if err != nil {
		return nil, err
	}
	return v, nil
}

func SaveVault(v Vault, dotenvFile string) error {
	path := tools.GetVaultOptsPath(dotenvFile)
	slog.Debug("making vault options file", "path", dotenvFile)

	template := make([]string, 0)
	template = append(template, "# this file is automatically generated by dotenv-keyvault")
	template = append(template, "# do not edit this file")
	template = append(template, "# this file is used to store options for the vault")
	template = append(template, "# you can use this file to set options for the vault")
	// template = append(template, "# or you can use the --vaultOptions flag to set options for the vault")
	template = append(template, "# see https://github.com/withholm/dotenv-keyvault for more info on the options available")

	opts := v.GetOptions()
	if opts["VAULT_TYPE"] == "" {
		slog.Debug("please mr developer, add 'VAULT_TYPE' as output to GetOptions()")
		return fmt.Errorf("vault type cannot be empty")
	}

	for k, v := range v.GetOptions() {
		template = append(template, fmt.Sprintf("%s = %s", k, v))
	}

	//str to byte
	template = append(template, "\n")
	out := []byte(strings.Join(template, "\n"))
	err := os.WriteFile(path, out, 0644)
	if err != nil {
		panic("failed to write file: " + err.Error())
	}
	return nil
}
